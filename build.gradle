//file:noinspection LongLine
import groovy.json.JsonSlurper
plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id("com.jaredsburrows.license") version "0.9.0"
    id "net.linguica.maven-settings" version "0.5"
    id 'io.github.CDAGaming.cursegradle' version '1.6.1'
    id "com.modrinth.minotaur" version "2.+"
}

version = mod_version
group = mod_group_id + "." + mod_id

base {
    archivesName = "${rootProject.name}"
}

delete "src/main/java/com"
delete "changelog.txt"
delete "CREDITS.txt"
delete "LICENSE.txt"
delete "README.txt"
publish.dependsOn(clean)

tasks.register('copyLicenses', Copy) {
    from 'build/reports/licenses'
    into 'lib_licences'
}
compileJava.dependsOn(copyLicenses)
copyLicenses.dependsOn("licenseReport")

apply from: "custom.gradle"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file('run/client')

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run/testserver')

            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    // flatDir {
    //     dir 'libs'
    // }
    maven {
        name "local-test-repo"
        url local_repository_path
    }
    maven {
        name "minecraft-mods-repo"
        url "https://secretsoft.jfrog.io/artifactory/minecraft-mods/"
    }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Example mod dependency with JEI - using fg.deobf() ensures the dependency is remapped to your development mappings
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    //Lombok
    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"

    testCompileOnly "org.projectlombok:lombok:${lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"
    // Minecraft Forge API
    compileOnly fg.deobf("de.geheimagentnr1.minecraft_forge_api:MinecraftForgeAPI-${minecraft_version}:${mfapi_version}")
    runtimeOnly fg.deobf("de.geheimagentnr1.minecraft_forge_api:MinecraftForgeAPI-${minecraft_version}:${mfapi_version}:dev")
    jarJar("de.geheimagentnr1.minecraft_forge_api:MinecraftForgeAPI-${minecraft_version}:[${mfapi_version},${next_unuable_mfapi_version})") {
        jarJar.pin(it, "${mfapi_version}")
        transitive = false
    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
            issueTrackerURL: issueTrackerURL,
            displayURL: displayURL,
            logoFile: logoFile,
            credits: credits,
            displayTest: displayTest,
            modDependencies: modDependencies,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jarJar.enable()
tasks.named('jarJar').configure {
    archiveClassifier = ''

    finalizedBy('reobfJarJar')
}

reobf {
    jarJar {}
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    archiveClassifier = 'slim'
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
            jarJar.component(it)
        }
    }
    repositories {
        maven {
            name "local-test-repo"
            url local_repository_path
        }
        maven {
            name "minecraft-mods-repo"
            url "https://secretsoft.jfrog.io/artifactory/minecraft-mods/"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

curseforge {
    apiKey = "${curseforgeApiKey}"
    project {
        id = "${curseforge_project_id}"
        changelogType = 'markdown'
        changelog = rootProject.file('CHANGELOG.md').text
        releaseType = 'release'
        addGameVersion "${minecraft_version}"
        if(Boolean.parseBoolean(usableOnClientSide)) {
            addGameVersion 'Client'
        }
        if(Boolean.parseBoolean(usableOnServerSide)) {
            addGameVersion 'Server'
        }
        if(((List) new JsonSlurper().parseText("${deployment_dependencies}")).size() > 0) {
            relations { final relation ->
                ((List) new JsonSlurper().parseText("${deployment_dependencies}")).forEach { final dependency ->
                    {
                        switch (dependency.type) {
                            case "required":
                                relation.requiredDependency dependency.name
                                break
                            case "optional":
                                relation.optionalDependency dependency.name
                                break
                            default:
                                throw new IllegalStateException("Unknown dependency type")
                        }
                    }
                }
            }
        }

        mainArtifact("./build/libs/${rootProject.name}-${version}.jar") {
            it.displayName = "${mod_name} ${minecraft_version}-${version}"
        }
    }
    options {
        debug = Boolean.parseBoolean("${uploadDebug}")
    }
}

modrinth {
    token = "${modrinthToken}"
    projectId = "${modrinth_project_id}"
    versionNumber = "${minecraft_version}-${version}"
    versionName = "${mod_name} ${minecraft_version}-${version}"
    changelog = rootProject.file("CHANGELOG.md").text
    uploadFile = "./build/libs/${rootProject.name}-${version}.jar"
    dependencies {
        ((List) new JsonSlurper().parseText("${deployment_dependencies}")).forEach { final dependency ->
            {
                switch (dependency.type) {
                    case "required":
                        required.project dependency.name
                        break
                    case "optional":
                        optional.project dependency.name
                        break
                    default:
                        throw new IllegalStateException("Unknown dependency type")
                }
            }
        }
    }
    debugMode = Boolean.parseBoolean("${uploadDebug}")
}
